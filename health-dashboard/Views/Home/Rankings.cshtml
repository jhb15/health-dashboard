@using System.Globalization;
@using X.PagedList.Mvc.Common;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc;
@using X.PagedList;

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <h2 class="box-title">Rankings</h2>
            </div>
            <div class="card-body">
                @if ( Model.RenderTables )
                {
                    <select asp-items="@(new SelectList(Model.ActivityTypeDict, "Key", "Value"))" class="form-control" id="activityTypeDDL" onchange="updateActivityAndMetric()">Activity Type</select>
                    <select asp-items="@(new SelectList(Model.GoalMetrics))" id="metricTypeDDL" class="form-control" onchange="updateActivityAndMetric()">Goal Metric</select>
                    string activityClass;
                    string goalMetricClass;
                    string activityMetricClass;
                    @for (int gm = 0; gm < Model.GoalMetrics.Length; gm++)
                    {
                        @foreach (KeyValuePair<int, string> at in Model.ActivityTypeDict)
                        {
                            var i = 0; var activityTypeId = 0;
                            activityClass = "activity-" + @at.Key;
                            goalMetricClass = "metric-" + Model.GoalMetrics[gm];
                            activityMetricClass = activityClass + "-" + goalMetricClass;
                            <table id="@activityMetricClass" class="@activityClass @goalMetricClass table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>Rank</th>
                                        <th>User</th>
                                        <th>Total (@Model.GoalMetrics[gm])</th>
                                        <th>Activity Type</th>
                                    </tr>
                                </thead>

                                @foreach (HealthActivity ha in Model.Activities)
                                {
                                    if (at.Key.Equals(ha.activityTypeId))
                                    {
                                        <tbody>
                                            @{i++; activityTypeId = ha.activityTypeId - 1;}
                                            <tr>
                                                <td>#@i</td>
                                                <td>@ha.userId</td>
                                                @{ var metric = typeof(HealthActivity).GetProperty(Model.GoalMetrics[gm]).GetValue(ha); }
                                                <td>@metric</td>
                                                <td>@Model.ActivityTypeDict[ha.activityTypeId]</td>
                                            </tr>
                                        </tbody>
                                    }
                                }
                            </table>
                        }
                    }
                    @Html.PagedListPager((IPagedList)Model.Activities, page => Url.Action("RemoveData", new { page }))
                } else
                {
                    <div>@Html.Raw(Model.Message)</div>
                }
            </div>
        </div>
    </div>
</div>
<script>
    @if (Model.RenderTables)
    {
        @:function updateActivityAndMetric() {
            @:var goalMetricTypes = [];
            @:var activityTypes = [];

            @foreach(var g in Model.GoalMetrics)
            {
                @:goalMetricTypes.push("@g");
            }
            @foreach (KeyValuePair<int, string> at in Model.ActivityTypeDict)
            {
                @:activityTypes.push("@at.Key");
            }
            @:var selectedActivityIndex = document.getElementById("activityTypeDDL").selectedIndex;
            @:var selectedActivityId = activityTypes[selectedActivityIndex];
            @:var selectedMetricIndex = document.getElementById("metricTypeDDL").selectedIndex;
            @:var activityCount = @Model.ActivityTypeDict.Count;
            @:var metricCount = @Model.GoalMetrics.Length;
            @:var goalMetricId = "";
            @:var activityId = "";
            @:for (j = 0; j < metricCount; j++) {
                @:for (i = 0; i < activityCount; i++) {
                    @:goalMetricId = "metric-" + goalMetricTypes[j];
                    @:activityId = "activity-" + activityTypes[i];
                    @:var activityMetricTable = document.getElementById(activityId + "-" + goalMetricId);
                    @:activityMetricTable.hidden = !(j == selectedMetricIndex && i == selectedActivityIndex);
                @:}
            @:}
        @:}
        @:updateActivityAndMetric();
    }
</script>
